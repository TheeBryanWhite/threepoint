//     /*
//         ========================================
//             ::Table of Contents
//
//            1. Function to convert px to em
//            2. Centering Mixins
//            3. Maintain Aspect Ratio Mixin
//            4. Clearfix Hack
//            5. Covering Mixin
//            6. Triangle Mixin
//            7. Custom Scroll Bars
//            8. Font Smoothing
//            9. Custom Scroll Bars
//            10. Positioning Mixins
//            11. Simple Asset Helper Functions
//            12. Simplify Events Mixin
//            13. Sticky Header Mixin
//            14. Margin Center
//            15. Screen Reader Text
//            16. Flex Styles Wrapper
//            17. Webkit Tap Highlight
//            18. Photoshop Letter Spacing
//            19. Square Sizing
//            20. Form Placeholder
//
//         ========================================
// */


//     /*
//         ========================================
//             ::Function to convert px to rem
//         ========================================
//     */
$base-size: 16;

@function toRem($target, $context: $base-size) {
    @return ($target / $context) * 1em;
}

//Example Usage:
//     .example {
//         font-size: toRem(16)
//     }

//     /*
//         ========================================
//             ::Centering Mixins
//         ========================================
//     */

@mixin center {
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
}

@mixin vertical-center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

//     /*
//         ========================================
//             ::Maintain Aspect Ratio Mixin
//         ========================================
//     */

@mixin maintain-aspect-ratio($width, $height) {
    position: relative;

    &:before {
        content: ' ';
        display: block;
        padding-top: ($height / $width) * 100%;
        width: 100%;
    }

    > .content {
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
    }
}

//     /*
//         ========================================
//             ::Clearfix Hack
//         ========================================
//     */

@mixin clearfix {
    clear: both;
    content: '';
    display: table;
}
//     /*
//         ========================================
//             ::Covering Mixin
//         ========================================
//     */

@mixin coverer {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}

//     /*
//         ========================================
//             ::Triangle Mixin
//         ========================================
//     */

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;
    content: '';
    height: 0;
    width: 0;
    z-index: 2;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    } @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}

//     /*
//         ========================================
//             ::Custom Scroll Bars
//         ========================================
//     */

// @author Sean Dempsey
// Easing Function Map Get
// Full Example and Demo: https://css-tricks.com/snippets/sass/easing-map-get-function/

$ease: (
  in-quad:      cubic-bezier(0.550, 0.085, 0.680, 0.530),
  in-cubic:     cubic-bezier(0.550, 0.055, 0.675, 0.190),
  in-quart:     cubic-bezier(0.895, 0.030, 0.685, 0.220),
  in-quint:     cubic-bezier(0.755, 0.050, 0.855, 0.060),
  in-sine:      cubic-bezier(0.470, 0, 0.745, 0.715),
  in-expo:      cubic-bezier(0.950, 0.050, 0.795, 0.035),
  in-circ:      cubic-bezier(0.600, 0.040, 0.980, 0.335),
  in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045),
  out-quad:     cubic-bezier(0.250, 0.460, 0.450, 0.940),
  out-cubic:    cubic-bezier(0.215, 0.610, 0.355, 1),
  out-quart:    cubic-bezier(0.165, 0.840, 0.440, 1),
  out-quint:    cubic-bezier(0.230, 1, 0.320, 1),
  out-sine:     cubic-bezier(0.390, 0.575, 0.565, 1),
  out-expo:     cubic-bezier(0.190, 1, 0.220, 1),
  out-circ:     cubic-bezier(0.075, 0.820, 0.165, 1),
  out-back:     cubic-bezier(0.175, 0.885, 0.320, 1.275),
  in-out-quad:  cubic-bezier(0.455, 0.030, 0.515, 0.955),
  in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1),
  in-out-quart: cubic-bezier(0.770, 0, 0.175, 1),
  in-out-quint: cubic-bezier(0.860, 0, 0.070, 1),
  in-out-sine:  cubic-bezier(0.445, 0.050, 0.550, 0.950),
  in-out-expo:  cubic-bezier(1, 0, 0, 1),
  in-out-circ:  cubic-bezier(0.785, 0.135, 0.150, 0.860),
  in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550)
);

@function ease($key) {
    @if map-has-key($ease, $key) {
        @return map-get($ease, $key);
    }

    @warn "Unkown '#{$key}' in $ease.";
    @return null;
}

// Example Usage:
//     .example {
//         animation: there-and-back 2.5s ease(in-quad) infinite alternate;
//     }


//     /*
//         ========================================
//             ::Font Smoothing
//         ========================================
//     */

@mixin font-smoothing {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
}

//     /*
//         ========================================
//             ::Custom Scroll Bars
//         ========================================
//     */

// Mixin to customize scrollbars
// Beware, this does not work in all browsers
// @author Hugo Giraudel
// @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
// @param {Color} $foreground-color - Scrollbar's color
// @param {Color} $background-color [mix($foreground-color, white, 50%)] - Scrollbar's color
// @example scss - Scrollbar styling
//   @include scrollbars(.5em, slategray);  <----- EXAMPLE HERE
$white: #fff;

@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, $white, 50%)) {
    //scss-lint:disable PropertySpelling
    // For Google Chrome
    ::-webkit-scrollbar {
        height: $size;
        width: $size;
    }

    ::-webkit-scrollbar-thumb {
        background: $foreground-color;
    }

    ::-webkit-scrollbar-track {
        background: $background-color;
    }

    // For Internet Explorer
    body {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}

//     /*
//         ========================================
//             ::Positioning Mixins
//         ========================================
//     */

// Shorthand mixin for offset positioning
// @param {String} $position - Either `relative`, `absolute` or `fixed`
// @param {Length} $top [null] - Top offset
// @param {Length} $right [null] - Right offset
// @param {Length} $bottom [null] - Bottom offset
// @param {Length} $left [null] - Left offset
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// Shorthand mixin for absolute positioning
// Serves as an alias for `position(absolute, ...)`
// @param {Arglist} $args - Offsets
// @require {mixin} position
@mixin absolute($args...) {
    @include position(absolute, $args...);
}

// Shorthand mixin for relative positioning
// Serves as an alias for `position(relative, ...)`
// @param {Arglist} $args - Offsets
// @require {mixin} position
@mixin relative($args...) {
    @include position(relative, $args...);
}

// Shorthand mixin for fixed positioning
// Serves as an alias for `position(fixed, ...)`
// @param {Arglist} $args - Offsets
// @require {mixin} position
@mixin fixed($args...) {
    @include position(fixed, $args...);
}

//     /*
//         ========================================
//             :: Simple Asset Helper Functions
//         ========================================
//     */

// Base path for assets (fonts, images...),
// should not include trailing slash
// @access public
// @type String
$asset-base-path: './' !default;

// Asset URL builder
// @access private
// @param {String} $type - Asset type, matching folder name
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
    @return url($asset-base-path + '/' + $type + '/' + $file);
}

// Image asset helper
// @access public
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the image
// @require {function} asset
@function image($file) {
    @return asset('images/', $file);
}

// Font asset helper
// @access public
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the font
// @require {function} asset
@function font($file) {
    @return asset('fonts', $file);
}


//    /*
//        ========================================
//            ::Simplify Events Mixin
//        ========================================
//    */

// Event wrapper
// @author Harry Roberts
// @param {Bool} $self (false) - Whether or not to include current selector
// @see https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts

@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

//     Example Usage:
//         .example {
//             text-decoration: none;
//
//             @include on-event {
//                 text-decoration: underline;
//             }
//         }

//    /*
//        ========================================
//            ::Sticky Header Mixin
//        ========================================
//    */

@mixin admin-sticky-fix($offset: 0) {
    $narrow-offset: 46px;
    $wide-offset: 32px;

    @if $offset != 0 and type-of($offset) == 'number' {
        $narrow-offset: $narrow-offset + $offset;
        $wide-offset: $wide-offset + $offset;
    }

    .admin-bar & {
        top: $narrow-offset;

        @media screen and (min-width: 783px) {
            top: $wide-offset;
        }
    }
}

//    /*
//        ========================================
//            ::Margin Center
//        ========================================
//    */

@mixin margin-center {
    margin-left: auto;
    margin-right: auto;
}

//     /*
//         ========================================
//             ::Screen Reader Text
//         ========================================
//     */
//scss-lint:disable ImportantRule

@mixin screen-reader-text {
    clip: rect(1px 1px 1px 1px);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute !important;
    width: 1px;
}

//     /*
//         ========================================
//             ::Flex Styles Wrapper
//         ========================================
//     */

@mixin flex-styles {
    @at-root {
        .flexbox &,
        .flexboxlegacy & {
            @content;
        }
    }
}

@mixin no-flexbox {
    @at-root {
        .no-flexbox &,
        .no-flexboxlegacy & {
            @content;
        }
    }
}

//     /*
//         ========================================
//             ::Webkit Tap Highlight
//         ========================================
//     */

@mixin tap-color($color: transparent) {
    //default: rgba(0, 0, 0, 0.4)
    -webkit-tap-highlight-color: $color;
}

//     /*
//         ========================================
//             ::Photoshop Letter Spacing
//         ========================================
//     */

//converts photoshop letter spacing to em
@mixin ps-letter-spacing($val) {
    letter-spacing: $val * 0.001em;
}

//  /*
//      ========================================
//          ::Square Sizing
//      ========================================
//  */

@mixin square($size) {
    height: $size;
    width: $size;
}

//     /*
//         ========================================
//             ::Form Placeholder
//         ========================================
//     */

@mixin placeholder($color) {
    &::placeholder {
        color: $color;
    }
}

// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

//  /*
//     ========================================
//         ::Colors
//     ========================================
//  */

$white: #fff;
$black: #000;
$gray: #767676;
$blue: #00aaec;

//scss-lint:disable ColorVariable
$colors: (
    white: $white,
    black: $black,
    gray: $gray,
    validation-color: #d9534f,
    fileupload-border: #ddd,
    fileupload-color: #aaa,
    input-border: #ccc
);

@function color($key) {
    @if map-has-key($colors, $key) {
        @return map-get($colors, $key);
    }

    @warn unquote('"Unknown "#{$key}" in $colors."');
    @return null;
}


//  /*
//     ========================================
//         ::Breakpoint Variables and Mixin
//     ========================================
//  */

$small: toRem(600);      // 37.5em
$iphonesL: toRem(667);
$iphonesPlus: toRem(414);
$iphonesPlusL: toRem(736);
$medium: toRem(768);     // 47.5em
$large: toRem(1024); 
$xlarge: toRem(1280); 

$breakpoints: (
    iphonesL: $iphonesL,
    iphonesPlus: $iphonesPlus,
    iphonesPlusL: $iphonesPlusL,
    small: $small,
    medium: $medium,
    large: $large,
    xlarge: $xlarge,
);

// new respond-to mixin! Takes either a map value or a unit value
// @include respond-to(small) & @include respond-to(599px, max)
// are both valid

@mixin respond-to($breakpoint, $minmax:'min') {
    @if map-has-key($breakpoints, $breakpoint) {
        @media screen and (#{$minmax}-width: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    } @else {
        @media screen and (#{$minmax}-width: em($breakpoint)) {
            @content;
        }
    }
}

// respond-between: for those times when you have some weird element
// that just happens to break between two odd breakpoints

@mixin respond-between($min, $max) {
    @media screen and (min-width: em($min)) and (max-width: em($max)) {
        @content;
    }
}

//  /*
//     ========================================
//         ::Z Index Map and Function
//     ========================================
//  */

$z-index: (
    header: 1,
    botomless-pit: -99999,
    mount-everest: 99999
);

@function z($key) {
    @if map-has-key($z-index, $key) {
        @return map-get($z-index, $key);
    }

    @warn unquote('"Unknown "#{$key}" in $z-index."');
    @return null;
}


$base-stack: "Raleway", Helvetica, Arial, sans-serif;

$fonts: (
    base: $base-stack
);

@function family($key) {
    @if map-has-key($fonts, $key) {
        @return map-get($fonts, $key);
    }

    @warn unquote('"Unknown "#{$key}" in $fonts."');
    @return null;
}

//  /*
//     ========================================
//         ::Font Weights
//     ========================================
//  */

$weights: (
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    xbold: 800,
    black: 900
);

@function fw($key) {
    @if map-has-key($weights, $key) {
        @return map-get($weights, $key);
    }

    @warn unquote('"Unknown "#{$key}" in $weights."');
    @return null;
}

@mixin button($bcolor,
$url,
$x1,
$y1,
$bor,
$col) {
    background: $bcolor;
    -webkit-mask: url($url);
    mask: url($url);
    -webkit-mask-size: $x1 $y1;
    mask-size: $x1 $y1;
    border: $bor;
    color: $col;
}


//  /*
//     ========================================
//         ::Global Styles
//     ========================================
//  */

::selection {
    background: color(black);
    color: color(white);
    text-shadow: none;
}

html {
    box-sizing: border-box;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    font-family: family(base);
    font-style: normal;
    font-weight: 400;
    line-height: 1.25;
}

a {
    color: color(white);
}

.group {
    @include clearfix;
}

.screen-reader-text {
    @include screen-reader-text;
}

main {
    padding: 0 2rem;
}
